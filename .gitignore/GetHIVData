#2018.03.08
#Retrivel Strategy:(ts = (("HIV" or "CCR5" or "CD4 T cell" or "CXCR4" or "HAART" or "human immunodefici* virus" OR "CC-chemokine receptor 5")) or ti=(aids and immun*) not ti="aided*" not ti="aid")
#Time windows:1981-2017,reference website:https://www.hiv.gov/hiv-basics/overview/history/hiv-and-aids-timeline
#data0:257,566
#data:134,720
#require data.table,stringr
source wos.read
library(data.table)
files <- list.files("C:/Users/Tong/Desktop/test", "*.txt", full.names = TRUE)
data0<-wos.read(files = files)
data2<-data0[grep(pattern="HIV|Hiv|hiv",data1$DE),]
data3<-data0[grep(pattern="AIDS|aids|Aids",data1$DE),]
data4<-data0[grep(pattern="HIV|Hiv|hiv",data1$TI),]
data5<-data0[grep(pattern="AIDS|aids|Aids",data1$TI),]
data1<-rbind(data2,data3,data4,data5)
data<-unique(data1)


write.csv(data,"C:/Users/Tong/Desktop/test/HIVDATA.csv",row.names = FALSE)
datat<-read.csv("C:/Users/Tong/Desktop/test/HIVDATA.csv")
data<-data.frame(datat$AU,datat$AF,datat$TI,datat$C1,datat$DT,datat$PY,datat$WC,datat$SC,datat$UT,stringsAsFactors = FALSE)
write.csv(data,"C:/Users/Tong/Desktop/test/HIVDATA2.csv",row.names = FALSE)

#20180326#
#因子型不能用于计算，要转换，所以进行以下操作
#transfer from factor to character#转换格式，第六行是年份  不转成character格式，不过如果有date类型，需要换一个类型转换方式
#datat<-read.csv("C:/Users/study/caseHIV/1.csv",stringsAsFactors = FALSE),这样就不用转换，记住带脑子#
datat<-read.csv("C:/Users/study/caseHIV/1.csv")
for(i in 1:5){datat[,i]=as.character(datat[,i])}
#column 6 is integer:Year#
for(i in 7:9){datat[,i]=as.character(datat[,i])}
---------------------------------------------------------------
#0327#
string <- 'GCGCG'
pattern <- 'GCG'
pattern_len <- nchar(pattern)

sapply(seq_len(nchar(string)), function(x) {
  substr(string, x, x + pattern_len - 1) == pattern
}) %>% 
  sum()
---------------------------------------------------------------
replace <- function(line, oldchar, newchar) {
  reg <- "\\[(\\s|\\S)*?\\]"
  pos <- str_locate_all(line,reg)
  lines <- str_sub(line, start = pos[[1]][, "start"], end = pos[[1]][, "end"])
  for (i in seq_along(lines)) {
  pos.new <- str_locate_all(lines[i], oldchar)
  pos.new <- pos.new[[1]] + pos[[1]][i, "start"] - 1
  for (i in seq_along(pos.new[, "start"])) {
  str_sub(line, start = pos.new[i, "start"], end = pos.new[i, "end"]) <- newchar
    }
    ##
  }
  return(line) ##
}
splitc1 <- function(line,splitchar) {
  #不为空或者包括;
    if (length(line)!=0) {
    if(str_detect(line,splitchar)>0){
      terms <- strsplit(line,splitchar)
      ##
      terms <- terms[[1]]
    } else {
      terms <- line  ##
    }
  } 
  return(terms)
}
test1<-replace(datat[1,4],';','#')#将[]里的;替换为##
test2<-splitc1(test1,splitchar = '; ')#按;切分#
test22 <- str_sub(test2[1], start = (str_locate_all(test2[1],"\\[(\\s|\\S)*?\\]")[[1]][, "start"])+1, end = (str_locate_all(test2[1],"\\[(\\s|\\S)*?\\]")[[1]][, "end"])-1)
#提取C1字段里[]内的内容，即每个机构对应的作者#
test5<-splitc1(datat[1,1],splitchar='; ')#提取AU字段单个作者#
test4<-splitc1(test3[2],splitchar = ',')#这里3？这句谨慎test4和接下来的paste先不用#
paste(test4[1],',',test4[length(test4)],sep = "")#将ins1+国家作为机构的识别#
a<-length(splitc1(datat[1,1],splitchar='; '))#提取作者数#
#这里写个循环，提取每个机构对应的作者数#
#提取[]之外的字段，疑问：如何看机构呢？一级？二级？N级？尊重标引？
#不需要吧，只用提取机构字段就可，因为既然分开，就是机构合作，ok
a<-str_locate(test2[4],"]")
b<-str_length(test2[4])
c<-as.numeric(a[1,1])
str_sub(test2[4], c+2, b)#有个空格，所有c+2
